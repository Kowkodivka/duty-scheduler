import asyncio
from asyncio import Event

from duties import create_monthly_schedule
from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message


async def get_usernames(message: Message, bot: AsyncTeleBot) -> list[str]:
    info_message = (
        "üìù Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª—é–¥–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (@username), –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–µ–∂—É—Ä–∏—Ç—å:"
    )
    await bot.reply_to(message, info_message)

    usernames = []
    response_event = Event()

    def is_author_message(target: Message):
        return (
            message.from_user.id == target.from_user.id and not response_event.is_set()
        )

    @bot.message_handler(func=is_author_message)
    async def process_usernames(target: Message):
        nonlocal usernames

        if target.entities:
            usernames = [
                target.text[entity.offset + 1 : entity.offset + entity.length]
                for entity in target.entities
                if entity.type == "mention"
            ]
        else:
            usernames = target.text.split()

        usernames = [name.strip() for name in usernames if name.strip()]

        if usernames:
            await bot.reply_to(
                target,
                f"‚úÖ –°–ø–∏—Å–æ–∫ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {', '.join(usernames)}",
            )
        else:
            await bot.reply_to(target, "‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –±—ã–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")

        response_event.set()

    try:
        await asyncio.wait_for(response_event.wait(), timeout=60)
    except TimeoutError:
        await bot.send_message(
            message.chat.id, "‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ. –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω."
        )
        return []

    return usernames


async def get_holidays(message: Message, bot: AsyncTeleBot) -> list[int]:
    info_message = (
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `1, 4, 5, 9-12` –∏–ª–∏ –æ—Ç–∫–∞–∂–∏—Ç–µ—Å—å, –Ω–∞–ø–∏—Å–∞–≤ `–Ω–µ—Ç`.\n"
        "–î–Ω–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª—è—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å."
    )

    await bot.reply_to(message, info_message, parse_mode="Markdown")

    holidays = []
    response_event = Event()

    def is_author_message(target: Message):
        return (
            message.from_user.id == target.from_user.id and not response_event.is_set()
        )

    @bot.message_handler(func=is_author_message)
    async def process_holidays(target: Message):
        nonlocal holidays

        if "–Ω–µ—Ç" in target.text.lower():
            await bot.reply_to(target, "‚úÖ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ—Ç.")
        else:
            input_text = target.text.replace(" ", "").strip(",")
            holidays = []

            for part in input_text.split(","):
                if "-" in part:
                    start, end = map(int, part.split("-"))
                    holidays.extend(range(start, end + 1))
                else:
                    holidays.append(int(part))

            holidays = sorted(set(holidays))

            await bot.reply_to(
                target, f"‚úÖ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏: {', '.join(map(str, holidays))}"
            )

        response_event.set()

    try:
        await asyncio.wait_for(response_event.wait(), timeout=60)
    except TimeoutError:
        await bot.send_message(
            message.chat.id, "‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ. –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω."
        )
        return []

    return holidays


async def start(message: Message, bot: AsyncTeleBot):
    usernames = await get_usernames(message, bot)
    if not usernames:
        return

    holidays = await get_holidays(message, bot)
    duties_schedule, formatted_schedule = create_monthly_schedule(usernames, holidays=holidays)

    await bot.reply_to(message, "```\n" + formatted_schedule + "\n```", parse_mode="Markdown")
