import asyncio

from duties import create_monthly_schedule, format_schedule
from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message


async def start(message: Message, bot: AsyncTeleBot):
    info_message = (
        "üìù –ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤–≤–µ–¥–∏—Ç–µ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–µ–∂—É—Ä–∏—Ç—å:"
    )
    sent_message = await bot.reply_to(message, info_message)

    def is_author_reply(msg):
        return (
            msg.reply_to_message
            and msg.reply_to_message.message_id == sent_message.message_id
            and msg.from_user.id == message.from_user.id
        )

    students = []
    active = True

    @bot.message_handler(func=is_author_reply)
    async def process_students(target):
        nonlocal students, active

        students = [
            {"id": entity.user.id, "name": entity.user.username}
            for entity in target.entities
            if entity.type == "mention" and entity.user
        ]

        active = False

        if students:
            await bot.reply_to(
                target,
                f"‚úÖ –°–ø–∏—Å–æ–∫ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {', '.join([s['name'] for s in students])}",
            )
        else:
            await bot.reply_to(target, "‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –±—ã–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")

    await asyncio.sleep(60)

    if active:
        await bot.send_message(
            message.chat.id, "‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ. –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω."
        )
        return

    duties_schedule = create_monthly_schedule(students)
    formatted_schedule = format_schedule(duties_schedule, students)

    await bot.reply_to(message, formatted_schedule)
